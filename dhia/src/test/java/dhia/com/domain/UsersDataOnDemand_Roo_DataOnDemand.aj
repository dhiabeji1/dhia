// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package dhia.com.domain;

import dhia.com.ServiceUsers;
import dhia.com.domain.Users;
import dhia.com.domain.UsersDataOnDemand;
import dhia.com.domain.users.Gender;
import dhia.com.domain.users.Nationality;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UsersDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UsersDataOnDemand: @Component;
    
    private Random UsersDataOnDemand.rnd = new SecureRandom();
    
    private List<Users> UsersDataOnDemand.data;
    
    @Autowired
    ServiceUsers UsersDataOnDemand.serviceUsers;
    
    public Users UsersDataOnDemand.getNewTransientUsers(int index) {
        Users obj = new Users();
        setBirthDate(obj, index);
        setCreated_at(obj, index);
        setFirstName(obj, index);
        setGender(obj, index);
        setLastName(obj, index);
        setNationality(obj, index);
        setPassword(obj, index);
        setU_job(obj, index);
        setU_personal_phone(obj, index);
        setU_phone(obj, index);
        setUserName(obj, index);
        return obj;
    }
    
    public void UsersDataOnDemand.setBirthDate(Users obj, int index) {
        Calendar birthDate = Calendar.getInstance();
        obj.setBirthDate(birthDate);
    }
    
    public void UsersDataOnDemand.setCreated_at(Users obj, int index) {
        Calendar created_at = Calendar.getInstance();
        obj.setCreated_at(created_at);
    }
    
    public void UsersDataOnDemand.setFirstName(Users obj, int index) {
        String firstName = "firstName_" + index;
        obj.setFirstName(firstName);
    }
    
    public void UsersDataOnDemand.setGender(Users obj, int index) {
        Gender gender = Gender.class.getEnumConstants()[0];
        obj.setGender(gender);
    }
    
    public void UsersDataOnDemand.setLastName(Users obj, int index) {
        String lastName = "lastName_" + index;
        obj.setLastName(lastName);
    }
    
    public void UsersDataOnDemand.setNationality(Users obj, int index) {
        Nationality nationality = Nationality.class.getEnumConstants()[0];
        obj.setNationality(nationality);
    }
    
    public void UsersDataOnDemand.setPassword(Users obj, int index) {
        String password = "password_" + index;
        if (password.length() > 20) {
            password = password.substring(0, 20);
        }
        obj.setPassword(password);
    }
    
    public void UsersDataOnDemand.setU_job(Users obj, int index) {
        String u_job = "u_job_" + index;
        if (u_job.length() > 10) {
            u_job = u_job.substring(0, 10);
        }
        obj.setU_job(u_job);
    }
    
    public void UsersDataOnDemand.setU_personal_phone(Users obj, int index) {
        String u_personal_phone = "u_personal_phone_" + index;
        if (u_personal_phone.length() > 20) {
            u_personal_phone = u_personal_phone.substring(0, 20);
        }
        obj.setU_personal_phone(u_personal_phone);
    }
    
    public void UsersDataOnDemand.setU_phone(Users obj, int index) {
        String u_phone = "u_phone_" + index;
        if (u_phone.length() > 20) {
            u_phone = u_phone.substring(0, 20);
        }
        obj.setU_phone(u_phone);
    }
    
    public void UsersDataOnDemand.setUserName(Users obj, int index) {
        String userName = "userName_" + index;
        if (userName.length() > 12) {
            userName = userName.substring(0, 12);
        }
        obj.setUserName(userName);
    }
    
    public Users UsersDataOnDemand.getSpecificUsers(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Users obj = data.get(index);
        BigInteger id = obj.getId();
        return serviceUsers.findUsers(id);
    }
    
    public Users UsersDataOnDemand.getRandomUsers() {
        init();
        Users obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return serviceUsers.findUsers(id);
    }
    
    public boolean UsersDataOnDemand.modifyUsers(Users obj) {
        return false;
    }
    
    public void UsersDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = serviceUsers.findUsersEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Users' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Users>();
        for (int i = 0; i < 10; i++) {
            Users obj = getNewTransientUsers(i);
            try {
                serviceUsers.saveUsers(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
